/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.estacionei.api;

import io.swagger.annotations.*;

import org.estacionei.model.Cliente;
import org.estacionei.model.Veiculo;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.estacionei.codegen.languages.SpringCodegen", date = "2019-09-20T20:35:29.312-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "clientes", description = "the clientes API")
public interface ClientesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "deleta uma forma de pagamento", nickname = "clientesIdClienteCartoesIdCartaoDelete", notes = "deleta uma forma de pagamento especifica ", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/clientes/{id_cliente}/cartoes/{id_cartao}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> clientesIdClienteCartoesIdCartaoDelete(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente,@ApiParam(value = "",required=true) @PathVariable("id_cartao") String idCartao) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "adiciona uma nova forma de pagamento", nickname = "clientesIdClienteCartoesPost", notes = "adiciona uma nova forma de pagamento", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "criado com sucesso"),
        @ApiResponse(code = 400, message = "requisição invalida") })
    @RequestMapping(value = "/clientes/{id_cliente}/cartoes",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> clientesIdClienteCartoesPost(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleta um veiculo", nickname = "clientesIdClienteDelete", notes = "deleta um veiculo especifico", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/clientes/{id_cliente}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> clientesIdClienteDelete(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "busca um cliente", nickname = "clientesIdClienteGet", notes = "consulta um cliente", response = Cliente.class, tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Cliente.class),
        @ApiResponse(code = 404, message = "ticket não encontrado") })
    @RequestMapping(value = "/clientes/{id_cliente}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Cliente> clientesIdClienteGet(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"senha\" : \"senha\",  \"id_cliente\" : \"id_cliente\",  \"endereco\" : \"endereco\",  \"cartoes\" : [ {    \"id_cartao_credito\" : \"id_cartao_credito\",    \"cvv\" : \"cvv\",    \"nome\" : \"nome\",    \"validade\" : \"validade\"  }, {    \"id_cartao_credito\" : \"id_cartao_credito\",    \"cvv\" : \"cvv\",    \"nome\" : \"nome\",    \"validade\" : \"validade\"  } ],  \"nome\" : \"nome\",  \"tipo_cliente\" : \"tipo_cliente\",  \"saldo\" : \"saldo\",  \"email\" : \"email\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "atualiza saldo", nickname = "clientesIdClientePatch", notes = "atializa saldo de um cliete", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "accepted"),
        @ApiResponse(code = 404, message = "id não encontrado"),
        @ApiResponse(code = 400, message = "bad request") })
    @RequestMapping(value = "/clientes/{id_cliente}",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> clientesIdClientePatch(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Cliente cliente) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "deleta um veiculo", nickname = "clientesIdClienteVeiculosIdVeiculoDelete", notes = "deleta um veiculo especifico", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content"),
        @ApiResponse(code = 400, message = "Bad request") })
    @RequestMapping(value = "/clientes/{id_cliente}/veiculos/{id_veiculo}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> clientesIdClienteVeiculosIdVeiculoDelete(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente,@ApiParam(value = "",required=true) @PathVariable("id_veiculo") String idVeiculo) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "busca um veiculo", nickname = "clientesIdClienteVeiculosIdVeiculoGet", notes = "consulta um determinado veiculo", response = Veiculo.class, tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Veiculo.class),
        @ApiResponse(code = 404, message = "veiculo não encontrado") })
    @RequestMapping(value = "/clientes/{id_cliente}/veiculos/{id_veiculo}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Veiculo> clientesIdClienteVeiculosIdVeiculoGet(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente,@ApiParam(value = "",required=true) @PathVariable("id_veiculo") String idVeiculo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id_estacionamento\" : \"id_estacionamento\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "cadastra novo veiculo", nickname = "clientesIdClienteVeiculosPost", notes = "cadastra um novo veiculo de um determinado cliente", tags={ "clientes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "criado com sucesso"),
        @ApiResponse(code = 400, message = "requisição invalida") })
    @RequestMapping(value = "/clientes/{id_cliente}/veiculos",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> clientesIdClienteVeiculosPost(@ApiParam(value = "",required=true) @PathVariable("id_cliente") String idCliente,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Veiculo veiculo) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}

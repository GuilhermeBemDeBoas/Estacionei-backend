/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.estacionei.api;

import io.swagger.annotations.*;

import org.estacionei.model.Ticket;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.estacionei.codegen.languages.SpringCodegen", date = "2019-09-20T20:35:29.312-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "tickets", description = "the tickets API")
public interface TicketsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "busca um ticket", nickname = "ticketsIdTicketCalcularPagamentoPost", notes = "consulta um ticket", response = Ticket.class, tags={ "tickets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Ticket.class),
        @ApiResponse(code = 404, message = "ticket não encontrado") })
    @RequestMapping(value = "/tickets/{id_ticket}/calcular_pagamento",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Ticket> ticketsIdTicketCalcularPagamentoPost(@ApiParam(value = "",required=true) @PathVariable("id_ticket") String idTicket,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Ticket ticket) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id_estacionamento\" : \"id_estacionamento\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "busca um ticket", nickname = "ticketsIdTicketGet", notes = "consulta um ticket", response = Ticket.class, tags={ "tickets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Ticket.class),
        @ApiResponse(code = 404, message = "ticket não encontrado") })
    @RequestMapping(value = "/tickets/{id_ticket}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Ticket> ticketsIdTicketGet(@ApiParam(value = "",required=true) @PathVariable("id_ticket") String idTicket) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id_estacionamento\" : \"id_estacionamento\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "gera um novo ticket", nickname = "ticketsPost", notes = "gera um novo ticket", tags={ "tickets", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "gerado com sucesso"),
        @ApiResponse(code = 400, message = "requisição invalida") })
    @RequestMapping(value = "/tickets",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> ticketsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Ticket ticket) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
